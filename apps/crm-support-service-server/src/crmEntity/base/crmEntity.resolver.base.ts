/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CrmEntity } from "./CrmEntity";
import { CrmEntityCountArgs } from "./CrmEntityCountArgs";
import { CrmEntityFindManyArgs } from "./CrmEntityFindManyArgs";
import { CrmEntityFindUniqueArgs } from "./CrmEntityFindUniqueArgs";
import { CreateCrmEntityArgs } from "./CreateCrmEntityArgs";
import { UpdateCrmEntityArgs } from "./UpdateCrmEntityArgs";
import { DeleteCrmEntityArgs } from "./DeleteCrmEntityArgs";
import { User } from "../../user/base/User";
import { CrmEntityService } from "../crmEntity.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CrmEntity)
export class CrmEntityResolverBase {
  constructor(
    protected readonly service: CrmEntityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "read",
    possession: "any",
  })
  async _crmEntitiesMeta(
    @graphql.Args() args: CrmEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CrmEntity])
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "read",
    possession: "any",
  })
  async crmEntities(
    @graphql.Args() args: CrmEntityFindManyArgs
  ): Promise<CrmEntity[]> {
    return this.service.crmEntities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CrmEntity, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "read",
    possession: "own",
  })
  async crmEntity(
    @graphql.Args() args: CrmEntityFindUniqueArgs
  ): Promise<CrmEntity | null> {
    const result = await this.service.crmEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CrmEntity)
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "create",
    possession: "any",
  })
  async createCrmEntity(
    @graphql.Args() args: CreateCrmEntityArgs
  ): Promise<CrmEntity> {
    return await this.service.createCrmEntity({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CrmEntity)
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "update",
    possession: "any",
  })
  async updateCrmEntity(
    @graphql.Args() args: UpdateCrmEntityArgs
  ): Promise<CrmEntity | null> {
    try {
      return await this.service.updateCrmEntity({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrmEntity)
  @nestAccessControl.UseRoles({
    resource: "CrmEntity",
    action: "delete",
    possession: "any",
  })
  async deleteCrmEntity(
    @graphql.Args() args: DeleteCrmEntityArgs
  ): Promise<CrmEntity | null> {
    try {
      return await this.service.deleteCrmEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: CrmEntity): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
