/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CrmEntity as PrismaCrmEntity,
  User as PrismaUser,
} from "@prisma/client";

export class CrmEntityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CrmEntityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.crmEntity.count(args);
  }

  async crmEntities<T extends Prisma.CrmEntityFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrmEntityFindManyArgs>
  ): Promise<PrismaCrmEntity[]> {
    return this.prisma.crmEntity.findMany<Prisma.CrmEntityFindManyArgs>(args);
  }
  async crmEntity<T extends Prisma.CrmEntityFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrmEntityFindUniqueArgs>
  ): Promise<PrismaCrmEntity | null> {
    return this.prisma.crmEntity.findUnique(args);
  }
  async createCrmEntity<T extends Prisma.CrmEntityCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrmEntityCreateArgs>
  ): Promise<PrismaCrmEntity> {
    return this.prisma.crmEntity.create<T>(args);
  }
  async updateCrmEntity<T extends Prisma.CrmEntityUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrmEntityUpdateArgs>
  ): Promise<PrismaCrmEntity> {
    return this.prisma.crmEntity.update<T>(args);
  }
  async deleteCrmEntity<T extends Prisma.CrmEntityDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CrmEntityDeleteArgs>
  ): Promise<PrismaCrmEntity> {
    return this.prisma.crmEntity.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.crmEntity
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
